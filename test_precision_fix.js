// Test des corrections de pr√©cision contre la sur-d√©tection
console.log('=== TEST CORRECTIONS PR√âCISION (ANTI SUR-D√âTECTION) ===\n');

// Analyse des logs r√©els
const stepsDetected = 44;  // Pas d√©tect√©s dans vos logs
const stepsReal = 25;      // Pas r√©els effectu√©s
const overDetectionRatio = stepsDetected / stepsReal;

console.log('üìä ANALYSE AVANT CORRECTIONS:');
console.log(`Pas r√©els: ${stepsReal}`);
console.log(`Pas d√©tect√©s: ${stepsDetected}`);
console.log(`Ratio sur-d√©tection: ${overDetectionRatio.toFixed(2)}x (${((overDetectionRatio - 1) * 100).toFixed(0)}% d'exc√®s)`);

// Simulation des nouvelles contraintes
const OLD_CONSTRAINTS = {
  minIntervalWalking: 500,  // ms
  minPeakThreshold: 0.08,
  adaptiveK: 0.9,
  significantPeakRatio: 1.1
};

const NEW_CONSTRAINTS = {
  minIntervalWalking: 600,  // ms - augment√©
  minPeakThreshold: 0.12,   // augment√©
  adaptiveK: 1.1,           // plus conservateur
  significantPeakRatio: 1.2, // plus strict
  strongPeakRequired: true   // nouvelle condition
};

console.log('\nüîß NOUVELLES CONTRAINTES:');
console.log(`Intervalle min marche: ${OLD_CONSTRAINTS.minIntervalWalking}ms ‚Üí ${NEW_CONSTRAINTS.minIntervalWalking}ms (+${NEW_CONSTRAINTS.minIntervalWalking - OLD_CONSTRAINTS.minIntervalWalking}ms)`);
console.log(`Seuil pic minimum: ${OLD_CONSTRAINTS.minPeakThreshold} ‚Üí ${NEW_CONSTRAINTS.minPeakThreshold} (+${((NEW_CONSTRAINTS.minPeakThreshold / OLD_CONSTRAINTS.minPeakThreshold - 1) * 100).toFixed(0)}%)`);
console.log(`Coefficient adaptatif: ${OLD_CONSTRAINTS.adaptiveK} ‚Üí ${NEW_CONSTRAINTS.adaptiveK} (+${((NEW_CONSTRAINTS.adaptiveK / OLD_CONSTRAINTS.adaptiveK - 1) * 100).toFixed(0)}%)`);
console.log(`Pic significatif: ${OLD_CONSTRAINTS.significantPeakRatio}x ‚Üí ${NEW_CONSTRAINTS.significantPeakRatio}x`);
console.log(`Condition pic fort: ${NEW_CONSTRAINTS.strongPeakRequired ? '‚úÖ AJOUT√âE' : '‚ùå ABSENTE'}`);

// Estimation r√©duction sur-d√©tection
const intervalReduction = 0.2;      // 20% reduction due √† l'intervalle plus long
const thresholdReduction = 0.15;    // 15% reduction due au seuil plus √©lev√©
const adaptiveReduction = 0.1;      // 10% reduction due au coefficient plus conservateur
const strongPeakReduction = 0.25;   // 25% reduction due √† la nouvelle condition

const totalReductionFactor = 1 - (intervalReduction + thresholdReduction + adaptiveReduction + strongPeakReduction);
const estimatedNewDetection = Math.round(stepsDetected * totalReductionFactor);

console.log('\nüéØ ESTIMATION AM√âLIORATION:');
console.log(`R√©duction estim√©e: ${(100 * (1 - totalReductionFactor)).toFixed(0)}%`);
console.log(`Nouvelle d√©tection estim√©e: ${estimatedNewDetection} pas`);
console.log(`Nouveau ratio estim√©: ${(estimatedNewDetection / stepsReal).toFixed(2)}x`);

const targetAccuracy = estimatedNewDetection <= 30 ? '‚úÖ EXCELLENT' : 
                      estimatedNewDetection <= 35 ? 'üéØ BON' : '‚ö†Ô∏è  ENCORE TROP';

console.log(`Pr√©cision attendue: ${targetAccuracy}`);

// Recommandations selon l'estimation
console.log('\nüí° RECOMMANDATIONS:');
if (estimatedNewDetection <= 30) {
  console.log('‚úÖ Les corrections devraient suffire');
  console.log('‚úÖ Testez avec 25 pas pour validation');
} else {
  console.log('‚ö†Ô∏è  Corrections suppl√©mentaires n√©cessaires:');
  console.log('   - Augmenter encore l\'intervalle minimum √† 700ms');
  console.log('   - Ajouter un filtre de variance minimum');
  console.log('   - Impl√©menter une confirmation par acc√©l√©ration verticale');
}

console.log('\n=== FIN DU TEST ==='); 