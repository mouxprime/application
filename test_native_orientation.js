/**
 * Script de test pour le service d'orientation native simplifi√©
 * Test de la boussole expo-location avec lissage et d√©tection de d√©rive
 */

import { ContinuousOrientationService } from './src/services/ContinuousOrientationService.js';

// Configuration de test
const testConfig = {
  smoothingAlpha: 0.1,
  accuracyDriftThreshold: 20, // 20 degr√©s de seuil de d√©rive
  
  driftDetection: {
    enabled: true,
    windowSize: 10,
    notificationInterval: 30000 // 30s entre notifications
  }
};

/**
 * Classe de test pour l'orientation native simplifi√©e
 */
class NativeOrientationTester {
  constructor() {
    this.service = new ContinuousOrientationService(testConfig);
    this.testResults = [];
    this.startTime = Date.now();
    
    // Configuration des callbacks
    this.service.onOrientationUpdate = (data) => {
      console.log(`[ORIENTATION] ${(data.heading * 180 / Math.PI).toFixed(1)}¬∞ (accuracy: ${data.accuracy.toFixed(1)}¬∞, confiance: ${(data.confidence * 100).toFixed(0)}%)`);
    };
    
    this.service.onDriftDetected = (data) => {
      console.log(`[D√âRIVE] Detected: accuracy moyenne ${data.averageAccuracy.toFixed(1)}¬∞ > seuil ${data.threshold}¬∞`);
      console.log(`[D√âRIVE] Message: ${data.message}`);
    };
  }

  /**
   * Test 1: D√©marrage de la boussole native
   */
  async testNativeCompassStart() {
    console.log('\nüß™ Test 1: D√©marrage boussole native');
    
    try {
      const success = await this.service.startNativeCompass();
      
      if (success) {
        console.log('‚úÖ Boussole native d√©marr√©e avec succ√®s');
        
        // Attendre quelques secondes pour recevoir des donn√©es
        await this.wait(3000);
        
        const orientation = this.service.getCurrentOrientation();
        if (orientation.heading !== undefined) {
          console.log(`‚úÖ Donn√©es re√ßues: ${(orientation.heading * 180 / Math.PI).toFixed(1)}¬∞`);
          this.testResults.push({ test: 'compass_start', success: true });
        } else {
          throw new Error('Aucune donn√©e d\'orientation re√ßue');
        }
        
      } else {
        throw new Error('√âchec d√©marrage boussole native');
      }
      
    } catch (error) {
      console.log(`‚ùå √âchec: ${error.message}`);
      this.testResults.push({ test: 'compass_start', success: false, error: error.message });
    }
  }

  /**
   * Test 2: Qualit√© des donn√©es de cap
   */
  async testHeadingQuality() {
    console.log('\nüß™ Test 2: Qualit√© des donn√©es de cap');
    
    try {
      const samples = [];
      const testDuration = 5000; // 5 secondes
      const sampleInterval = 200; // 200ms
      
      console.log('Collecte de donn√©es pendant 5 secondes...');
      
      const collectSample = () => {
        const orientation = this.service.getCurrentOrientation();
        if (orientation.heading !== undefined) {
          samples.push({
            heading: orientation.heading,
            accuracy: orientation.accuracy,
            confidence: orientation.confidence,
            timestamp: Date.now()
          });
        }
      };
      
      const interval = setInterval(collectSample, sampleInterval);
      await this.wait(testDuration);
      clearInterval(interval);
      
      if (samples.length === 0) {
        throw new Error('Aucun √©chantillon collect√©');
      }
      
      // Analyse de la qualit√©
      const avgAccuracy = samples.reduce((sum, s) => sum + s.accuracy, 0) / samples.length;
      const avgConfidence = samples.reduce((sum, s) => sum + s.confidence, 0) / samples.length;
      
      console.log(`‚úÖ ${samples.length} √©chantillons collect√©s`);
      console.log(`‚úÖ Accuracy moyenne: ${avgAccuracy.toFixed(1)}¬∞`);
      console.log(`‚úÖ Confiance moyenne: ${(avgConfidence * 100).toFixed(0)}%`);
      
      // Crit√®res de succ√®s
      const success = avgAccuracy < 30 && avgConfidence > 0.2; // Crit√®res assouplis
      
      if (success) {
        console.log('‚úÖ Qualit√© des donn√©es acceptable');
        this.testResults.push({ test: 'heading_quality', success: true, avgAccuracy, avgConfidence });
      } else {
        throw new Error(`Qualit√© insuffisante: accuracy=${avgAccuracy.toFixed(1)}¬∞, confiance=${(avgConfidence * 100).toFixed(0)}%`);
      }
      
    } catch (error) {
      console.log(`‚ùå √âchec: ${error.message}`);
      this.testResults.push({ test: 'heading_quality', success: false, error: error.message });
    }
  }

  /**
   * Test 3: Lissage d'orientation
   */
  async testOrientationSmoothing() {
    console.log('\nüß™ Test 3: Lissage d\'orientation');
    
    try {
      const samples = [];
      const testDuration = 3000; // 3 secondes
      
      console.log('Test du lissage pendant 3 secondes...');
      
      const collectSample = () => {
        const orientation = this.service.getCurrentOrientation();
        if (orientation.heading !== undefined) {
          samples.push({
            raw: orientation.rawHeading,
            smoothed: orientation.heading,
            timestamp: Date.now()
          });
        }
      };
      
      const interval = setInterval(collectSample, 100); // 100ms
      await this.wait(testDuration);
      clearInterval(interval);
      
      if (samples.length < 10) {
        throw new Error('Pas assez d\'√©chantillons pour tester le lissage');
      }
      
      // Calculer la variance brute vs liss√©e
      const rawVariance = this.calculateVariance(samples.map(s => s.raw));
      const smoothedVariance = this.calculateVariance(samples.map(s => s.smoothed));
      
      console.log(`‚úÖ Variance brute: ${rawVariance.toFixed(4)}`);
      console.log(`‚úÖ Variance liss√©e: ${smoothedVariance.toFixed(4)}`);
      console.log(`‚úÖ R√©duction de variance: ${((1 - smoothedVariance / rawVariance) * 100).toFixed(1)}%`);
      
      // Le lissage doit r√©duire la variance ou √™tre √©quivalent
      if (smoothedVariance <= rawVariance * 1.1) { // Tol√©rance 10%
        console.log('‚úÖ Lissage efficace ou stable');
        this.testResults.push({ test: 'smoothing', success: true, rawVariance, smoothedVariance });
      } else {
        throw new Error('Le lissage d√©grade la stabilit√©');
      }
      
    } catch (error) {
      console.log(`‚ùå √âchec: ${error.message}`);
      this.testResults.push({ test: 'smoothing', success: false, error: error.message });
    }
  }

  /**
   * Test 4: D√©tection de d√©rive
   */
  async testDriftDetection() {
    console.log('\nüß™ Test 4: D√©tection de d√©rive');
    
    try {
      const initialStatus = this.service.getDetailedStatus();
      console.log(`Seuil de d√©rive: ${initialStatus.drift.threshold}¬∞`);
      console.log(`Fen√™tre d'√©chantillons: ${testConfig.driftDetection.windowSize}`);
      
      // R√©initialiser l'historique pour test propre
      this.service.resetDriftHistory();
      
      // Attendre accumulation de donn√©es
      await this.wait(2000);
      
      const finalStatus = this.service.getDetailedStatus();
      const hasHistory = finalStatus.drift.accuracyHistory.length > 0;
      
      console.log(`‚úÖ √âchantillons collect√©s: ${finalStatus.drift.accuracyHistory.length}`);
      
      if (hasHistory) {
        console.log('‚úÖ D√©tection de d√©rive op√©rationnelle');
        this.testResults.push({ test: 'drift_detection', success: true });
      } else {
        throw new Error('Aucun historique de d√©rive collect√©');
      }
      
    } catch (error) {
      console.log(`‚ùå √âchec: ${error.message}`);
      this.testResults.push({ test: 'drift_detection', success: false, error: error.message });
    }
  }

  /**
   * Utilitaires
   */
  calculateVariance(values) {
    if (values.length === 0) return 0;
    
    const mean = values.reduce((sum, v) => sum + v, 0) / values.length;
    const squaredDiffs = values.map(v => {
      const diff = v - mean;
      return diff * diff;
    });
    
    return squaredDiffs.reduce((sum, sq) => sum + sq, 0) / values.length;
  }

  wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * G√©n√©ration du rapport final
   */
  generateReport() {
    console.log('\nüìä RAPPORT DE TEST - ORIENTATION NATIVE SIMPLIFI√âE');
    console.log('='.repeat(50));
    
    const totalTests = this.testResults.length;
    const successfulTests = this.testResults.filter(r => r.success).length;
    const failedTests = totalTests - successfulTests;
    
    console.log(`Total des tests: ${totalTests}`);
    console.log(`Succ√®s: ${successfulTests}`);
    console.log(`√âchecs: ${failedTests}`);
    console.log(`Taux de r√©ussite: ${((successfulTests / totalTests) * 100).toFixed(1)}%`);
    
    console.log('\nD√©tail des r√©sultats:');
    this.testResults.forEach((result, index) => {
      const status = result.success ? '‚úÖ' : '‚ùå';
      console.log(`${index + 1}. ${status} ${result.test}`);
      if (result.error) {
        console.log(`   Erreur: ${result.error}`);
      }
    });
    
    const testDuration = Date.now() - this.startTime;
    console.log(`\nDur√©e totale: ${(testDuration / 1000).toFixed(1)}s`);
    
    // Arr√™ter le service
    this.service.stop();
    console.log('\nService d\'orientation native arr√™t√©');
  }
}

/**
 * Ex√©cution des tests
 */
async function runNativeOrientationTests() {
  console.log('üß™ D√©marrage des tests d\'orientation native simplifi√©e\n');
  
  const tester = new NativeOrientationTester();
  
  try {
    await tester.testNativeCompassStart();
    await tester.testHeadingQuality();
    await tester.testOrientationSmoothing();
    await tester.testDriftDetection();
    
  } catch (error) {
    console.error('Erreur critique durant les tests:', error);
  } finally {
    tester.generateReport();
  }
}

// Ex√©cution automatique si fichier ex√©cut√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  runNativeOrientationTests().catch(console.error);
}

export { NativeOrientationTester }; 